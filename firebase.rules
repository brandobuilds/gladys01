rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserOwned(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return request.resource.data.keys().hasAll(['email', 'createdAt', 'updatedAt']) &&
             request.resource.data.email is string;
    }
    
    function isValidReminder() {
      return request.resource.data.keys().hasAll(['title', 'userId', 'createdAt', 'updatedAt']) &&
             request.resource.data.title is string &&
             request.resource.data.userId == request.auth.uid;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && isUserOwned(userId);
      allow create: if isAuthenticated() && isUserOwned(userId) && isValidUser();
      allow update: if isAuthenticated() && isUserOwned(userId);
      allow delete: if false;
    }

    // Reminders
    match /reminders/{reminderId} {
      allow read: if isAuthenticated() && (
        resource == null || resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && isValidReminder();
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}